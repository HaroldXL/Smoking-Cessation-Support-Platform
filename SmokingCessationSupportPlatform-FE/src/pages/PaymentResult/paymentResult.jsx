import React, { useEffect, useState, useCallback } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import axios from "axios";
import { useDispatch, useSelector } from "react-redux";
import { login } from "../../store/redux/features/userSlice";
import { FaCheckCircle, FaTimesCircle, FaHome } from "react-icons/fa";
import "./paymentResult.css";
import api from "../../config/axios";

const PaymentResult = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const currentUser = useSelector((state) => state.user);
  const [loading, setLoading] = useState(true);
  const [result, setResult] = useState(null); // "success" | "fail"

  // L·∫•y profile m·ªõi nh·∫•t v√† c·∫≠p nh·∫≠t redux + localStorage
  const fetchUserProfile = useCallback(async () => {
    try {
      console.log("üîÑ Fetching user profile...");
      const res = await api.get("profile/my");
      console.log("‚úÖ Profile fetched:", res.data);

      // Ki·ªÉm tra n·∫øu hasActive v·∫´n l√† null, th·ª≠ fetch l·∫°i
      if (res.data.hasActive === null) {
        console.log("‚ö†Ô∏è hasActive is null, trying again in 2 seconds...");
        
        // Th·ª≠ l·∫°i sau 2 gi√¢y
        setTimeout(async () => {
          try {
            const retryRes = await api.get("profile/my");
            console.log("üîÑ Retry fetch result:", retryRes.data);
            
            if (retryRes.data.hasActive !== null) {
              localStorage.setItem("user", JSON.stringify(retryRes.data));
              dispatch(login(retryRes.data));
              console.log("‚úÖ Profile updated with retry");
              
              // Dispatch custom event
              window.dispatchEvent(
                new CustomEvent("userUpdated", {
                  detail: retryRes.data,
                })
              );
            } else {
              console.log("‚ö†Ô∏è hasActive still null after retry");
            }
          } catch (retryError) {
            console.error("‚ùå Retry fetch failed:", retryError);
          }
        }, 2000);
      }

      // C·∫≠p nh·∫≠t localStorage v·ªõi data hi·ªán t·∫°i (d√π hasActive c√≥ th·ªÉ null)
      localStorage.setItem("user", JSON.stringify(res.data));
      console.log("‚úÖ localStorage updated");

      // C·∫≠p nh·∫≠t Redux store
      dispatch(login(res.data));
      console.log("‚úÖ Redux store updated");

      // Dispatch custom event ƒë·ªÉ notify c√°c component kh√°c
      window.dispatchEvent(
        new CustomEvent("userUpdated", {
          detail: res.data,
        })
      );
    } catch (error) {
      console.error("‚ùå L·ªói l·∫•y profile m·ªõi:", error);
    }
  }, [dispatch]);

  useEffect(() => {
    const params = new URLSearchParams(location.search);
    const transactionId = params.get("transaction_id");
    const responseCode = params.get("vnp_ResponseCode");
    if (!transactionId || !responseCode) {
      setResult("fail");
      setLoading(false);
      return;
    }
    axios
      .get("/api/subscription/payment/return", {
        params: {
          transaction_id: transactionId,
          vnp_ResponseCode: responseCode,
        },
      })
      .then(async () => {
        if (responseCode === "00") {
          setResult("success");
          setLoading(true);

          // Fetch user profile
          await fetchUserProfile();

          // ƒê·ª£i th√™m m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o Redux ƒë∆∞·ª£c c·∫≠p nh·∫≠t
          setTimeout(() => {
            setLoading(false);
          }, 1000); // TƒÉng t·ª´ 500ms l√™n 1000ms
        } else {
          setResult("fail");
        }
      })
      .catch(() => setResult("fail"))
      .finally(() => {
        if (responseCode !== "00") setLoading(false);
      });
  }, [location, fetchUserProfile]);

  // Function ƒë·ªÉ handle navigation v√† force refresh Redux
  const handleGoHome = async () => {
    console.log("üè† Going home...");
    console.log("üìä Current Redux user state:", currentUser);

    // Ki·ªÉm tra n·∫øu hasActive v·∫´n null, th·ª≠ fetch l·∫°i
    if (currentUser && currentUser.hasActive === null) {
      console.log("‚ö†Ô∏è hasActive is still null, trying to fetch again...");
      try {
        const res = await api.get("profile/my");
        console.log("üîÑ Final fetch before home:", res.data);
        
        if (res.data.hasActive !== null) {
          localStorage.setItem("user", JSON.stringify(res.data));
          dispatch(login(res.data));
          console.log("‚úÖ Updated profile before going home");
        }
      } catch (error) {
        console.error("‚ùå Final fetch failed:", error);
      }
    }

    // Force refresh Redux v·ªõi data t·ª´ localStorage
    const userData = localStorage.getItem("user");
    if (userData) {
      try {
        const user = JSON.parse(userData);
        console.log("üîÑ Force refreshing Redux with:", user);
        dispatch(login(user));

        // Log l·∫°i ƒë·ªÉ ki·ªÉm tra
        setTimeout(() => {
          console.log("üìä Redux state after refresh:", currentUser);
        }, 100);
      } catch (error) {
        console.error("‚ùå Error parsing user data:", error);
      }
    }

    // Navigate sau m·ªôt delay nh·ªè
    setTimeout(() => {
      navigate("/");
    }, 300);
  };

  if (loading) {
    return (
      <div className="payment-result-background">
        <div className="payment-result-loading">
          ƒêang x√°c nh·∫≠n thanh to√°n, vui l√≤ng ch·ªù...
        </div>
      </div>
    );
  }

  return (
    <div className="payment-result-background">
      <div className="payment-result-card">
        {result === "success" ? (
          <>
            <div className="icon-success">
              <FaCheckCircle size={48} />
            </div>
            <h2 className="result-title success">Thanh to√°n th√†nh c√¥ng!</h2>
            <p className="result-message">
              C·∫£m ∆°n b·∫°n ƒë√£ thanh to√°n. Quy·ªÅn Premium ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t, b·∫°n c√≥
              th·ªÉ v·ªÅ trang ch·ªß.
            </p>
            <button className="btn-home" onClick={handleGoHome}>
              <FaHome className="mr-2" /> V·ªÅ trang ch·ªß
            </button>
          </>
        ) : (
          <>
            <div className="icon-fail">
              <FaTimesCircle size={48} />
            </div>
            <h2 className="result-title fail">Thanh to√°n th·∫•t b·∫°i!</h2>
            <p className="result-message">
              Vui l√≤ng th·ª≠ l·∫°i ho·∫∑c li√™n h·ªá h·ªó tr·ª£.
            </p>
            <button className="btn-home" onClick={handleGoHome}>
              <FaHome className="mr-2" /> V·ªÅ trang ch·ªß
            </button>
          </>
        )}
      </div>
    </div>
  );
};

export default PaymentResult;
